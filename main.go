package main

import (
	"encoding/json"
	"fmt"
	"math"
	"net/http"
	"strconv"
	"strings"
	"sync"

	"github.com/gin-gonic/gin"
)

const baseUrl = "https://api.random.org/json-rpc/4/invoke"

type AutoGenerated struct {
	Jsonrpc string `json:"jsonrpc"`
	Result  struct {
		Random struct {
			Data           []int  `json:"data"`
			CompletionTime string `json:"completionTime"`
		} `json:"random"`
		BitsUsed      int `json:"bitsUsed"`
		BitsLeft      int `json:"bitsLeft"`
		RequestsLeft  int `json:"requestsLeft"`
		AdvisoryDelay int `json:"advisoryDelay"`
	} `json:"result"`
	ID int `json:"id"`
}

type result struct {
	Stddev int   `json:"stddev"`
	Data   []int `json:"data"`
}

func getRandomNumbers(n int, min int, max int) (data *AutoGenerated, err error) {
	requestBody := strings.NewReader(fmt.Sprintf(`{
		"jsonrpc": "2.0",
		"method": "generateIntegers",
		"params": {
			"apiKey": "63c31ebc-6c50-46b7-83bd-10001776c680",
			"n": %d,
			"min": %d,
			"max": %d,
			"replacement": true
		},
		"id": 42
	}`, n, min, max))

	response, err := http.Post(baseUrl, "application/json", requestBody)
	if err != nil {
		return nil, err
	}

	err = json.NewDecoder(response.Body).Decode(&data)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func getRandomNumbersConcurrently(numOfRequests int, n int, min int, max int) sync.Map {
	var randomNumbersMap sync.Map
	wg := sync.WaitGroup{}

	for i := 0; i < numOfRequests; i++ {
		wg.Add(1)
		go func(idx int) {
			data, err := getRandomNumbers(n, min, max)
			if err != nil {
				panic(err)
			}
			randomNumbersMap.Store(idx, data.Result.Random.Data)
			wg.Done()
		}(i)
	}
	wg.Wait()
	return randomNumbersMap
}

func stddev(d []int) int {
	var num []float64
	var sum, mean, sd float64
	for i := 0; i < len(d); i++ {
		num = append(num, float64(d[i]))
		sum += num[i]
	}
	mean = sum / float64(len(num))

	for j := 0; j < len(num); j++ {
		// The use of Pow math function func Pow(x, y float64) float64
		sd += math.Pow(num[j]-mean, 2)
	}
	// The use of Sqrt math function func Sqrt(x float64) float64
	sd = math.Sqrt(sd / float64(len(num)))
	return int(sd)
}

func convertSyncMap(m sync.Map) []result {
	var results []result
	fmt.Println("map content:")
	i := 0
	m.Range(func(key, value interface{}) bool {
		var r result
		r.Stddev = stddev(value.([]int))
		r.Data = value.([]int)
		results = append(results, r)
		i++
		return true
	})
	return results
}

func getMethod(c *gin.Context) {

	requests, err := strconv.Atoi(c.DefaultQuery("requests", "1"))
	if err != nil {
		panic(err)
	}

	length, err := strconv.Atoi(c.Query("length"))
	if err != nil {
		panic(err)
	}
	randomNumbersMap := getRandomNumbersConcurrently(requests, length, 1, 10) // change var name

	c.IndentedJSON(http.StatusOK, convertSyncMap(randomNumbersMap))
}

func main() {
	router := gin.Default()
	router.GET("/random/mean", getMethod)
	router.Run(":8000")
}
